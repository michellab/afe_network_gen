#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

Labelling functions for Hydra

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Labels:

MBAR estimator error


"""
import numpy as np 
import glob
import csv
from tqdm import tqdm

def retrieveMBAROutput(path_to_datafile, verbose=False):
	"""
	Read SOMD-generated MBAR output file and return outputs

	--args
	path_to_datafile (str): path to SOMD-generated MBAR output file

	--returns
	overlap_matrix (array): phase-space overlap matrix generated by PyMBAR
	MBAR_freenrg (float): Free energy estimation generated by PyMBAR
	MBAR_error (float): Error estimation generated by PyMBAR

	"""
	overlap_matrix = None
	MBAR_freenrg = None
	MBAR_error = None
	OS = None

	if verbose:
		print("#####\n"+path_to_datafile)
	try:
		f = open(path_to_datafile, "r")
	except FileNotFoundError:
		print("Unable to find "+path_to_datafile)
		return (None, None, None)

	for line in f:

		## OVERLAP MATRIX
		# read the line after the #Overlap keyword for overlap matrix: 
		if line.startswith("#Overlap"):
			overlap_matrix = []
			# grab and process next line until end of matrix:
			row = next(f)
			while not row.startswith("#DG"):
				# format and append the matrix row:
				row = [ float(value) for value in row.split(" ") ]
				overlap_matrix.append(row)
				row = next(f)
			# convert to numpy array for returning:
			overlap_matrix = np.array(overlap_matrix)
			if verbose:
				print(np.array_str(overlap_matrix, precision=3, suppress_small=True))

			# compute overlap score if possible:
			off_diag_overlaps= []

			num_overlaps = len(overlap_matrix) -1
			for lambda_idx, matrix_row in zip(range(num_overlaps), overlap_matrix):
				off_diag_overlap = matrix_row[lambda_idx + 1]
				off_diag_overlaps.append(off_diag_overlap)

			mean_overlap = np.mean(off_diag_overlaps)
			# we're interested in consistency of the off-diagonal vector; but also in dips in overlap;
			# as such, count number of overlap values that fall on or below the recommended 0.03:
			low_overlaps = [val for val in off_diag_overlaps if val < 0.03]
			num_low_overlaps = len(low_overlaps)


			OS = mean_overlap/(num_low_overlaps+1)

		## FREENRG & ERROR
		# read the line after the #MBAR keyword for energy prediction: 
		if line.startswith("#MBAR"):
			# grab and process next line:
			prediction_line = next(f)
			MBAR_freenrg = prediction_line.split(", ")[0].split("  ")[0].rstrip()
			MBAR_error = prediction_line.split(", ")[1].split("  ")[0].rstrip()
			if verbose:
				print("Freenrg:", MBAR_freenrg)
				print("MBAR error:", MBAR_error)
				print("#####\n")

	return overlap_matrix, OS, MBAR_freenrg, MBAR_error


if __name__ == "__main__":

	contents = glob.glob("SOLVATED/*")
	# clean slate the labels file:
	file = open("labels/mbar_labels.txt", "w")
	file.close()

	# iterate over perturbations and write MBAR data to file:
	print("Writing labels:")
	with open("labels/mbar_labels.txt", "w") as file:
		writer = csv.writer(file)
		for path in tqdm(contents):
			overlap_matrix, OS, MBAR_freenrg, MBAR_error = retrieveMBAROutput(path+"/free/freenrg-MBAR.dat", verbose=False)
			pert_name = path.replace("SOLVATED/", "")
			writer.writerow([pert_name, MBAR_error, MBAR_freenrg, OS])


